name: Create Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'minor'
        type: choice
        options:
        - minor  # 1.0 -> 1.1 -> 1.2 (recommended)
        - major  # 1.0 -> 2.0 -> 3.0

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get latest tag
      id: latest_tag
      run: |
        # Get the latest tag, or start with v0.0 if no tags exist
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Calculate new version
      id: new_version
      run: |
        LATEST_TAG="${{ steps.latest_tag.outputs.latest_tag }}"
        VERSION_TYPE="${{ github.event.inputs.version_type }}"
        
        # Remove 'v' prefix for version calculation
        CURRENT_VERSION=${LATEST_TAG#v}
        
        # Split version into parts (only use major.minor format)
        IFS='.' read -r -a version_parts <<< "$CURRENT_VERSION"
        major=${version_parts[0]:-0}
        minor=${version_parts[1]:-0}
        
        # Bump version based on type (only major.minor)
        case $VERSION_TYPE in
          "major")
            major=$((major + 1))
            minor=0
            ;;
          "minor")
            minor=$((minor + 1))
            ;;
          "patch")
            # For patch, we increment minor since we only use major.minor
            minor=$((minor + 1))
            ;;
        esac
        
        NEW_VERSION="v${major}.${minor}"
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Create and push tag
      run: |
        NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
        git push origin $NEW_VERSION

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        release_name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          ## Azure GitOps DevContainer ${{ steps.new_version.outputs.new_version }}
          
          ### üöÄ Features
          - Optimized Ubuntu 24.04 base image (1.17GB)
          - Complete GitOps toolset: FluxCD, Kubernetes, Terraform, Azure CLI
          - Flux Operator MCP Server v0.28.0 for AI-assisted workflows
          - Multi-platform support: linux/amd64, linux/arm64
          
          ### üîí Security
          - Non-root user with controlled sudo access
          - Comprehensive .dockerignore for secure builds
          - Supply chain security with build provenance
          
          ### üì¶ Docker Image
          ```bash
          docker pull ghcr.io/gianniskt/azure-gitops-image:${{ steps.new_version.outputs.new_version }}
          docker pull ghcr.io/gianniskt/azure-gitops-image:latest
          ```
          
          ### üõ†Ô∏è Tools Included
          - FluxCD CLI, Kustomize, Helm, kubectl, kubectx
          - Azure CLI, Terraform
          - Flux Operator MCP Server for AI assistance
          - jq, yq, Python 3.12, Git
        draft: false
        prerelease: false
